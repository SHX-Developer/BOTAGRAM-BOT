from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext

import sqlite3
import asyncio
import datetime
import time
from emoji import emoji_list
import re
import shutil

import config
import database
import reply_markups
import inline_markups
import view_profiles
import profile_statistics
import search_user
import send_message
import display
import public_chat
import anonym_chat
import settings
import follow
import unfollow
import like
import dislike
import reply_callbacks
import admin
import forward


#  LIBRARY VARIABLES

main_db = sqlite3.connect("database/user_data.db", check_same_thread = False)
followers_db = sqlite3.connect("database/followers.db", check_same_thread = False)
follows_db = sqlite3.connect("database/follows.db", check_same_thread = False)
likes_db = sqlite3.connect("database/likes.db", check_same_thread = False)
dislikes_db = sqlite3.connect("database/dislikes.db", check_same_thread = False)
views_db = sqlite3.connect("database/views.db", check_same_thread = False)
chat_db = sqlite3.connect("database/chat.db", check_same_thread = False)

main_sql = main_db.cursor()
followers_sql = followers_db.cursor()
follows_sql = follows_db.cursor()
likes_sql = likes_db.cursor()
dislikes_sql = dislikes_db.cursor()
views_sql = views_db.cursor()
chat_sql = chat_db.cursor()

storage = MemoryStorage()

bot = Bot(config.token)
dp = Dispatcher(bot, storage = MemoryStorage())

date_time = datetime.datetime.now().date()

symbols =  ("!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "-", "+", "=", "‚Ññ", "?",
            "[", "]", "{", "}", "|", "/", ":", ";", '"', "'", ",", "<", ".", ">")



#  REGISTER
class RegisterStates(StatesGroup):
    username = State()
    gender = State()

#  PROFILE
class ProfileStates(StatesGroup):
    username = State()
    firstname = State()
    age = State()
    city = State()
    gender = State()
    status = State()
    bio = State()
    photo = State()

#  SEARCH
class SearchState(StatesGroup):
    username = State()

#  MESSAGE
class MessageState(StatesGroup):
    username = State()
    message = State()

#  REPLY
class ReplyState(StatesGroup):
    message = State()

#  VIEW STATUS
class ViewStatusState(StatesGroup):
    message = State()

#  SETTINGS
class SettingsStates(StatesGroup):
    gender = State()
    city = State()

#  ADMIN
class AdminStates(StatesGroup):
    verify = State()
    unverify = State()
    forward = State()
    delete_from_chat = State()
    delete_profile = State()







#  CREATING DATABASES

main_sql.execute("CREATE TABLE IF NOT EXISTS user_access (id INTEGER, username TEXT, firstname TEXT, lastname TEXT, date TIMESTAMP)")
main_sql.execute("CREATE TABLE IF NOT EXISTS user_profile (id INTEGER, username TEXT, firstname TEXT, age TEXT, city TEXT, gender TEXT, status TEXT, bio TEXT, photo BLOB)")
main_sql.execute("CREATE TABLE IF NOT EXISTS user_action (id_1 INTEGER, id_2 INTEGER)")
main_sql.execute("CREATE TABLE IF NOT EXISTS user_chat (id INTEGER, username TEXT, status TEXT)")
main_sql.execute("CREATE TABLE IF NOT EXISTS user_verification (id INTEGER, username TEXT, verification TEXT)")
main_sql.execute("CREATE TABLE IF NOT EXISTS user_photo (id INTEGER, count INTEGER)")
main_sql.execute("CREATE TABLE IF NOT EXISTS user_statistics (id INTEGER, username TEXT, followers INTEGER, follows INTEGER, likes INTEGER, dislikes INTEGER, views INTEGER)")
main_sql.execute("CREATE TABLE IF NOT EXISTS user_settings (id INTEGER, username TEXT, gender TEXT, age TEXT, city TEXT, notifications TEXT, verification TEXT)")
main_db.commit()

chat_sql.execute('CREATE TABLE IF NOT EXISTS user_status (id INTEGER, status TEXT)')
chat_sql.execute('CREATE TABLE IF NOT EXISTS queue (id INTEGER)')
chat_sql.execute('CREATE TABLE IF NOT EXISTS chat (id_1 INTEGER, id_2 INTEGER)')
chat_db.commit()










#  START COMMAND

@dp.message_handler(commands = ['start'])
async def start_command(message: types.Message):

    main_sql.execute('INSERT INTO user_access (id, username, firstname, lastname, date) VALUES (?, ?, ?, ?, ?)',
    (str(message.chat.id), str(message.from_user.username), str(message.from_user.first_name), str(message.from_user.last_name), date_time))
    main_db.commit()

    main_sql.execute('SELECT status FROM user_chat WHERE id = ?', (message.chat.id,))
    user_chat = main_sql.fetchone()

    if user_chat == None:

        main_sql.execute('SELECT id FROM user_profile WHERE id = ?', (message.chat.id,))
        user_id = main_sql.fetchone()

        if user_id == None:

            await bot.send_message(message.chat.id,   "üëã  –ü—Ä–∏–≤–µ—Ç—Å–≤—É–µ–º –≤–∞—Å, –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å !")
            await asyncio.sleep(2)
            await get_username(message)

        else:

            await bot.send_message(message.chat.id, "üè†  –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", parse_mode="html", reply_markup = reply_markups.menu_button)

    elif user_chat[0] == "Yes":

        await public_chat.leave_chat(message)

    else:

        await bot.send_message(message.chat.id, "üè†  –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", parse_mode="html", reply_markup = reply_markups.menu_button)

#  GET USERNAME

async def get_username(message):
    await bot.send_message(message.chat.id, "üëá  –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–µ–±–µ –Ω–æ–≤—ã–π <b>–Æ–ó–ï–†–ù–ï–ô–ú</b>:", parse_mode="html")
    await RegisterStates.username.set()

#  CHECK USERNAME

@dp.message_handler(state = RegisterStates.username)
async def check_useranme(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['username'] = message.text

        main_sql.execute('SELECT username FROM user_profile WHERE username = ?', (message.text,))
        found_username = main_sql.fetchone()

        #  EXISTS
        if found_username:
            await bot.send_message(message.chat.id, '‚ùóÔ∏è –î–∞–Ω–Ω—ã–π <b>–Æ–ó–ï–†–ù–ï–ô–ú</b> —É–∂–µ –∑–∞–Ω—è—Ç.', parse_mode = "html")
            await delete_message(message)

        #  COMMANDS
        elif message.text == "/start" or message.text == "/menu":
            await bot.send_message(message.chat.id, '‚ùóÔ∏è <b>–Æ–ó–ï–†–ù–ï–ô–ú</b> –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª—ã.', parse_mode = "html")
            await delete_message(message)

        #  SYMBOLS
        elif any(symbol in message.text for symbol in symbols):
            await bot.send_message(message.chat.id, '‚ùóÔ∏è <b>–Æ–ó–ï–†–ù–ï–ô–ú</b> –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª—ã.', parse_mode = "html")
            await delete_message(message)

        #  EMOJI
        elif emoji_list(message.text):
            await bot.send_message(message.chat.id, '‚ùóÔ∏è <b>–Æ–ó–ï–†–ù–ï–ô–ú</b> –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç–º–æ–¥–∑–∏.', parse_mode = "html")
            await delete_message(message)

        #  PROBELS
        elif " " in message.text:
            await bot.send_message(message.chat.id, "‚ùóÔ∏è <b>–Æ–ó–ï–†–ù–ï–ô–ú</b> –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç—Å—Ç—É–ø—ã.", parse_mode = "html")
            await delete_message(message)

        #  LENGTH
        elif len(message.text) < 6:
            await bot.send_message(message.chat.id, '‚ùóÔ∏è <b>–Æ–ó–ï–†–ù–ï–ô–ú</b> –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—å—à–µ 6 –±—É–∫–≤.', parse_mode = "html")
            await delete_message(message)

        elif len(message.text) > 15:
            await bot.send_message(message.chat.id, '‚ùóÔ∏è <b>–Æ–ó–ï–†–ù–ï–ô–ú</b> –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª—å—à–µ 15 –±—É–∫–≤.', parse_mode = "html")
            await delete_message(message)

        else:
            #  CREATING PHOTO
            original_photo_path = "photo/profile_photo.jpg"
            new_photo_path = f"photo/{message.chat.id}.jpg"
            shutil.copy2(original_photo_path, new_photo_path)

            await RegisterStates.next()
            await database.add_user_data(message)

#  GET GENDER

async def display_gender(message):
    await bot.send_message(message.chat.id, '‚úÖ  –£—Å–ø–µ—à–Ω–æ !')
    await delete_message(message)
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, 'üë´  –î–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è, –∫–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ ?', reply_markup = reply_markups.reg_gender_reply)
    await asyncio.sleep(2)

#  CHECK GENDER

@dp.message_handler(state = RegisterStates.gender)
async def check_gender(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['gender'] = message.text

        if message.text == 'üôã‚Äç‚ôÇÔ∏è  –ü–∞—Ä–Ω–µ–π':
            main_sql.execute('UPDATE user_settings SET gender = ? WHERE id = ?', ("–ü–∞—Ä–µ–Ω—å", message.chat.id))
            main_db.commit()
            await state.finish()
            await registration(message)

        elif message.text == 'üôã‚Äç‚ôÄÔ∏è  –î–µ–≤—É—à–µ–∫':
            main_sql.execute('UPDATE user_settings SET gender = ? WHERE id = ?', ("–î–µ–≤—É—à–∫–∞", message.chat.id))
            main_db.commit()
            await state.finish()
            await registration(message)

        elif message.text == 'üëª  –ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã':
            main_sql.execute('UPDATE user_settings SET gender = ? WHERE id = ?', ("–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã", message.chat.id))
            main_db.commit()
            await state.finish()
            await registration(message)

        else:
            await bot.send_message(message.chat.id, 'üë´  –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:', reply_markup = reply_markups.reg_gender_reply)
            await delete_message(message)

#  REGISTRATION

async def registration(message):

    main_sql.execute('SELECT username FROM user_profile WHERE id = ?', (message.chat.id,))
    user_username = main_sql.fetchone()[0]

    await bot.send_message(284929331, f'üéâ  –ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å  -  <code>{user_username}</code>  üéâ', parse_mode = "html")
    await bot.send_message(message.chat.id, '‚úÖ  –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å !')
    await delete_message(message)
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, '‚ù§Ô∏è  –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å  -  BOTAGRAM !')
    await asyncio.sleep(2)
    await bot.send_message(message.chat.id, 'üìù  –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:', reply_markup = reply_markups.menu_button)
    await asyncio.sleep(2)
    await display.display_new_profile(message)



#  MENU COMMAND

@dp.message_handler(commands=["menu"])
async def menu_command(message):

    main_sql.execute('SELECT status FROM user_chat WHERE id = ?', (message.chat.id,))
    user_chat_status = main_sql.fetchone()[0]

    if user_chat_status == "Yes":
        await public_chat.leave_chat(message)
    else:
        await bot.send_message(message.chat.id, 'üè†  –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', parse_mode="html", reply_markup=reply_markups.menu_button)



#  HELP COMMAND

@dp.message_handler(commands=["help"])
async def help_command(message):

    inline = InlineKeyboardMarkup()
    inline.row(InlineKeyboardButton(text = "–ü—Ä–æ—á–∏—Ç–∞—Ç—å", url = "https://telegra.ph/BOTAGRAM-08-26"))

    await bot.send_message(message.chat.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:', parse_mode="html", reply_markup=inline)





#  FORWARD 1
@dp.message_handler(commands=["forward_1"])
async def rassylka_1(message):

    inline = InlineKeyboardMarkup()
    inline.row(InlineKeyboardButton(text = "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª", url = "https://t.me/botagram_channel"))

    if message.chat.id == 284929331:
        await bot.send_message(message.chat.id, "<b> –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å  ‚úÖ </b>", parse_mode="html", reply_markup=reply_markups.forward_button)

        main_sql.execute('SELECT * FROM user_profile')
        data = main_sql.fetchall()
        main_sql.execute('SELECT COUNT(id) FROM user_profile')
        all_users = main_sql.fetchone()[0]

        await bot.send_message(284929331, "‚òëÔ∏è  –ü—Ä–æ—Å–∏–º –≤–∞—Å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –æ –ø—Ä–æ–µ–∫—Ç–µ, –≥–¥–µ –∑–∞—Ä–∞–Ω–Ω–µ–µ –±—É–¥–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö, –Ω–æ–≤–æ—Å—Ç—è—Ö –∞ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –∫–æ–Ω–∫—É—Ä—Å—ã –Ω–∞ –ø—Ä–∏–∑—ã  üéÅ", parse_mode = "html", reply_markup = inline)
        total = 0

        for users in data:
            try:
                await bot.send_message(users[0], "‚òëÔ∏è  –ü—Ä–æ—Å–∏–º –≤–∞—Å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –æ –ø—Ä–æ–µ–∫—Ç–µ, –≥–¥–µ –∑–∞—Ä–∞–Ω–Ω–µ–µ –±—É–¥–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö, –Ω–æ–≤–æ—Å—Ç—è—Ö –∞ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –∫–æ–Ω–∫—É—Ä—Å—ã –Ω–∞ –ø—Ä–∏–∑—ã  üéÅ", parse_mode = "html", reply_markup = inline)

                total += 1
                print(f"[{users[0]}]: –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ  ‚úÖ")

            except Exception:
                print(f"[{users[0]}]: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞  ‚ùå")

        else:
            blocked_users = all_users - total
            await bot.send_message(message.chat.id, f"<b>‚úÖ  –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:  {total}  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑:  {all_users}   </b>", parse_mode="html", reply_markup=None)
            await bot.send_message(message.chat.id, f"<b>‚ùå  –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:  {blocked_users} </b>", parse_mode="html", reply_markup=None)

#  FORWARD 2
@dp.message_handler(commands = ["forward_chat"])
async def rassylka_chat(message):

    if message.chat.id == 284929331:
        await bot.send_message(message.chat.id, "<b> –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å  ‚úÖ </b>", parse_mode="html", reply_markup=reply_markups.forward_button)

        main_sql.execute('SELECT * FROM user_profile')
        data = main_sql.fetchall()
        main_sql.execute('SELECT COUNT(id) FROM user_profile')
        all_users = main_sql.fetchone()[0]

        total = 0

        for users in data:
            try:
                with open("chat.jpg", "rb") as photo:
                    await bot.send_photo(users[0], photo, caption = "–°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ . . .")

                print(f"[{users[1]}]: –ø–æ–ª—É—á–∏–ª(a) —Å–æ–æ–±—â–µ–Ω–∏–µ  ‚úÖ")
            except Exception:
                print(f"[{users[1]}]: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª(a) –±–æ—Ç–∞  ‚ùå")

        else:
            blocked_users = all_users - total
            await bot.send_message(message.chat.id, f"–í—Å–µ–≥–æ:  <b>{all_users}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", parse_mode="html", reply_markup=None)
            await bot.send_message(message.chat.id, f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:  <b>{total}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", parse_mode="html", reply_markup=None)
            await bot.send_message(message.chat.id, f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏:  <b>{blocked_users}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", parse_mode="html", reply_markup=None)

#  FORWARD
@dp.message_handler(commands = ["forward"])
async def rassylka(message):

    if message.chat.id == 284929331:
        await bot.send_message(message.chat.id, "<b> –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å  ‚úÖ </b>", parse_mode="html", reply_markup=reply_markups.forward_button)

        main_sql.execute('SELECT id FROM user_profile WHERE photo = ?', ("-",))
        data = main_sql.fetchall()
        main_sql.execute('SELECT COUNT(id) FROM user_profile')
        all_users = main_sql.fetchone()[0]

        await bot.send_message(284929331, "üòá  –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ! –ü—Ä–æ–¥–æ–ª–∂–∏–º –ø–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π?!  üî•\n\nüòå  –ü—Ä–æ—Å–∏–º –≤–∞—Å –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ö–≤–∞—Ç–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π. \n\nüôå  –¢–µ–ø–µ—Ä—å, —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏, –Ω—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã –∏–º–µ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤–æ—é).", parse_mode="html", reply_markup=None)
        total = 0

        for users in data:
            try:
                await bot.send_message(users[0], "üòá  –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ! –ü—Ä–æ–¥–æ–ª–∂–∏–º –ø–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π?!  üî•\n\nüòå  –ü—Ä–æ—Å–∏–º –≤–∞—Å –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ö–≤–∞—Ç–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π. \n\nüôå  –¢–µ–ø–µ—Ä—å, —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏, –Ω—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã –∏–º–µ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤–æ—é).", parse_mode="html", reply_markup=None)

                total += 1
                print(f"[{users[0]}]: –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ  ‚úÖ")
            except Exception:
                print(f"[{users[0]}]: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞  ‚ùå")

        else:
            blocked_users = all_users - total
            await bot.send_message(message.chat.id, f"<b>‚úÖ  –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:  {total}  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑:  {all_users}   </b>", parse_mode="html", reply_markup=None)
            await bot.send_message(message.chat.id, f"<b>‚ùå  –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:  {blocked_users} </b>", parse_mode="html", reply_markup=None)















#  VOICE
@dp.message_handler(content_types = ["voice"])
async def send_voice(message):

    main_sql.execute('SELECT status FROM user_chat WHERE id = ?', (message.chat.id,))
    user_chat_status = main_sql.fetchone()[0]

    if user_chat_status == "Yes":
        await public_chat.send_voice(message)

#  STICKERS
@dp.message_handler(content_types=["sticker"])
async def send_sticker(message):

    main_sql.execute('SELECT status FROM user_chat WHERE id = ?', (message.chat.id,))
    user_chat_status = main_sql.fetchone()[0]

    if user_chat_status == "Yes":
        await public_chat.send_sticker(message)

#  PHOTO
@dp.message_handler(content_types=["photo"])
async def photo(message):

    main_sql.execute('SELECT status FROM user_chat WHERE id = ?', (message.chat.id,))
    user_chat_status = main_sql.fetchone()[0]

    if user_chat_status == "Yes":
        await public_chat.send_photo(message)

#  VIDEO
@dp.message_handler(content_types = ["video"])
async def video(message):

    main_sql.execute('SELECT status FROM user_chat WHERE id = ?', (message.chat.id,))
    user_chat_status = main_sql.fetchone()[0]

    if user_chat_status == "Yes":
        await public_chat.send_video(message)

#  AUDIO
@dp.message_handler(content_types = ["audio"])
async def send_audio(message):

    main_sql.execute('SELECT status FROM user_chat WHERE id = ?', (message.chat.id,))
    user_chat_status = main_sql.fetchone()[0]

    if user_chat_status == "Yes":
        await public_chat.send_audio(message)










#  TEXT
@dp.message_handler()
async def text(message: types.Message):

    main_sql.execute('SELECT id FROM user_profile WHERE id = ?', (message.chat.id,))
    user_id = main_sql.fetchone()

    # chat_sql.execute('SELECT status FROM user_status WHERE id = ?', (message.chat.id,))
    # chat_status = main_sql.fetchone()

    if user_id is not None:
        main_sql.execute('SELECT status FROM user_chat WHERE id = ?', (message.chat.id,))
        user_chat_status = main_sql.fetchone()[0]

        if user_chat_status == "Yes":
            if message.text == "‚ùå  –ü–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç  ‚ùå":
                await public_chat.leave_chat(message)
            else:
                await public_chat.send_message(message)

        elif user_chat_status == "No":
            # if chat_status == "Yes":

            #     if message.text == "‚ùå  –ü–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç":
            #         user_id = main_sql.execute('SELECT id FROM user_access WHERE id = ?', (message.chat.id,)).fetchone()[0]
            #         id_1 = chat_sql.execute('SELECT id_1 FROM chat WHERE id_1 = ?', (user_id,)).fetchall()

            #         if id_1:
            #             id_2 = chat_sql.execute('SELECT id_2 FROM chat WHERE id_1 = ?', (user_id,)).fetchone()[0]
            #             chat_sql.execute('DELETE FROM chat WHERE id_1 = ?', (user_id,))
            #             chat_sql.execute('UPDATE user_status SET status = ? WHERE id = ?', ("No", user_id))
            #             chat_sql.execute('UPDATE user_status SET status = ? WHERE id = ?', ("No", id_2))
            #             chat_db.commit()

            #             await bot.send_message(user_id, "<b> ‚ùå  –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —á–∞—Ç. </b>", parse_mode = "html", reply_markup = reply_markups.chat_button)
            #             await bot.send_message(id_2, "<b> –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç ‚ùóÔ∏è </b>", parse_mode = "html", reply_markup = reply_markups.chat_button)

            #         else:
            #             id_2 = chat_sql.execute('SELECT id_1 FROM chat WHERE id_2 = ?', (user_id,)).fetchone()[0]
            #             chat_sql.execute('DELETE FROM chat WHERE id_2 = ?', (user_id,))
            #             chat_sql.execute('UPDATE user_status SET status = ? WHERE id = ?', ("No", user_id))
            #             chat_sql.execute('UPDATE user_status SET status = ? WHERE id = ?', ("No", id_2))
            #             chat_db.commit()

            #             await bot.send_message(user_id, "<b> ‚ùå  –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —á–∞—Ç. </b>", parse_mode = "html", reply_markup = reply_markups.chat_button)
            #             await bot.send_message(id_2, "<b> –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç ‚ùóÔ∏è </b>", parse_mode = "html", reply_markup = reply_markups.chat_button)

            #     else:
            #         chat_sql.execute('SELECT id_1 FROM chat WHERE id_1 = ?', (user_id,))
            #         id_1 = chat_sql.fetchall()

            #         if id_1:
            #             id_2 = chat_sql.execute('SELECT id_2 FROM chat WHERE id_1 = ?', (user_id,)).fetchone()[0]
            #             await bot.send_message(id_2, message.text)

            #         else:
            #             id_2 = chat_sql.execute('SELECT id_1 FROM chat WHERE id_2 = ?', (user_id,)).fetchone()[0]
            #             await bot.send_message(id_2, message.text)


        #  PROFILE

            if message.text == "üë§  –ü—Ä–æ—Ñ–∏–ª—å":
                await display.display_profile(message)



        #  VIEW PROFILES

            elif message.text == "üöÄ  –°–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏":
                await view_profiles.view_profiles(message)



        #  SEND MESSAGE

            elif message.text == "üíå  –ù–∞–ø–∏—Å–∞—Ç—å":
                await MessageState.username.set()
                await bot.send_message(
                    chat_id = message.chat.id,
                    text = '–í–≤–µ–¥–∏—Ç–µ <b>"–Æ–ó–ï–†–ù–ï–ô–ú"</b> –ø–æ–ª—É—á–∞—Ç–µ–ª—è:',
                    parse_mode = "html",
                    reply_markup = reply_markups.cancel_button)



        #  SEARCH

            elif message.text == "üîç  –ü–æ–∏—Å–∫":
                await SearchState.username.set()
                await bot.send_message(
                    chat_id = message.chat.id,
                    text = '–í–≤–µ–¥–∏—Ç–µ <b>"–Æ–ó–ï–†–ù–ï–ô–ú"</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
                    parse_mode = "html",
                    reply_markup = reply_markups.cancel_button)



        #  FAVORITES

            elif message.text == "üèÜ  –§–∞–≤–æ—Ä–∏—Ç—ã":
                await display.display_favorites(message)



        #  SETTINGS

            elif message.text == "‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
                await settings.settings(message)



        #  CHAT

            elif message.text == "üåê  –ß–∞—Ç":
                await display.display_public_chat(message)

            elif message.text == "üé≠  –ü—É–±–ª–∏—á–Ω—ã–π —á–∞—Ç":
                await display.display_public_chat(message)

            elif message.text == "üëª  –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç":
                await display.display_anonym_chat(message)




            elif message.text == "‚ùå  –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫":
                user_id = main_sql.execute('SELECT id FROM user_access WHERE id = ?', (message.chat.id,)).fetchone()[0]
                id_1 = chat_sql.execute('SELECT id FROM queue').fetchone()[0]

                if id_1 == user_id:
                    chat_sql.execute('UPDATE queue SET id = ?', ("-",))
                    chat_db.commit()

                    await bot.send_message(user_id, "<b> ‚ùå  –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∏—Å–∫. </b>", parse_mode = "html", reply_markup = reply_markups.chat_button)

                else:
                    await bot.send_message(user_id, "<b> –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏ ‚ùóÔ∏è </b>", parse_mode = "html", reply_markup = reply_markups.menu_button)



            elif message.text == "‚ùå  –ü–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç":
                await bot.send_message(user_id, "<b> –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ ‚ùóÔ∏è </b>", parse_mode = "html", reply_markup = reply_markups.menu_button)



        #  CANCEL

            elif message.text == "‚ùå  –û—Ç–º–µ–Ω–∞  ‚ùå":
                await bot.send_message(message.chat.id, "üè†  –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup = reply_markups.menu_button)
                await bot.delete_message(chat_id = message.chat.id, message_id = message.message_id)
                await bot.delete_message(chat_id = message.chat.id, message_id = message.message_id - 1)

        #  MAIN MENU

            elif message.text == "üè†  –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                await bot.send_message(message.chat.id, "üè†  –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup = reply_markups.menu_button)
                await bot.delete_message(chat_id = message.chat.id, message_id = message.message_id)





        #  ADMIN

            elif message.text == '–ê–¥–º–∏–Ω' or message.text == '–∞–¥–º–∏–Ω' or message.text == 'flvby' or message.text == 'Flvby':
                if message.chat.id == 284929331:
                    await bot.send_message(284929331, "<b> –í—ã –∑–∞—à–ª–∏ –≤ –º–µ–Ω—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: </b>", parse_mode="html", reply_markup=reply_markups.admin_menu)



        #  STATISTICS

            elif message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                if message.chat.id == 284929331:
                    await admin.bot_statistics(message)

        #  SEND MESSAGE

            elif message.text == "–°–æ–æ–±—â–µ–Ω–∏–µ":
                if message.chat.id == 284929331:
                    await bot.send_message(message.chat.id, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ . . .")

        #  FORWARD

            elif message.text == "–†–∞—Å—Å—ã–ª–∫–∞":
                if message.chat.id == 284929331:
                    await bot.send_message(message.chat.id, "<b> –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏: </b>", parse_mode="html", reply_markup=reply_markups.forward_button)

            elif message.text == "–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è":
                if message.chat.id == 284929331:
                    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ <b>–¢–ï–ö–°–¢</b> –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ <b>–†–ê–°–°–´–õ–ê–¢–¨</b>:", parse_mode="html", reply_markup=reply_markups.cancel_button)

            elif message.text == "–†–∞—Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è":
                if message.chat.id == 284929331:
                    await forward.forward_update(message)

            elif message.text == "–†–∞—Å—Å—ã–ª–∫–∞ —á–∞—Ç–∞":
                if message.chat.id == 284929331:
                    await forward.forward_chat(message)

        #  VERIFICATION

            elif message.text == "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è":
                if message.chat.id == 284929331:
                    await bot.send_message(message.chat.id, "<b> –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª: </b>", parse_mode="html", reply_markup=reply_markups.verification_button)

            elif message.text == "–í—ã–¥–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é":
                if message.chat.id == 284929331:
                    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ <b>–Æ–ó–ï–†–ù–ï–ô–ú</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ <b>–ü–û–î–¢–í–ï–†–î–ò–¢–¨</b>:", parse_mode="html")

            elif message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é":
                if message.chat.id == 284929331:
                    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ <b>–Æ–ó–ï–†–ù–ï–ô–ú</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ <b>–û–ü–†–û–í–ï–†–ì–ù–£–¢–¨</b>:", parse_mode="html")

        #  DELETE USER

            elif message.text == "–£–¥–∞–ª–∏—Ç—å":
                if message.chat.id == 284929331:
                    await bot.send_message(message.chat.id, "<b> –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª: </b>", parse_mode="html", reply_markup=reply_markups.delete_user_button)

            elif message.text == "–£–¥–∞–ª–∏—Ç—å –∏–∑ —á–∞—Ç–∞":
                if message.chat.id == 284929331:
                    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ <b>–Æ–ó–ï–†–ù–ï–ô–ú</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ <b>–£–î–ê–õ–ò–¢–¨</b> –∏–∑ —á–∞—Ç–∞:", parse_mode="html")

            elif message.text == "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –∏–∑ —á–∞—Ç–∞":
                if message.chat.id == 284929331:
                    await admin.delete_all_chat_users(message)

            elif message.text == "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ":
                if message.chat.id == 284929331:
                    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ <b>–Æ–ó–ï–†–ù–ï–ô–ú</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ <b>–£–î–ê–õ–ò–¢–¨</b>:", parse_mode="html")

        #  BACK TO ADMIN MENU

            elif message.text == "–ù–∞–∑–∞–¥":
                if message.chat.id == 284929331:
                    await bot.send_message(284929331, "<b>–í—ã –≤ –ø–∞–Ω–µ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: </b>", parse_mode="html", reply_markup=reply_markups.admin_menu)

        #  EXIT ADMIN MENU

            elif message.text == "–í—ã–π—Ç–∏ –∏–∑ –º–µ–Ω—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤":
                if message.chat.id == 284929331:
                    await bot.send_message(284929331, "<b> –í—ã –≤—ã—à–ª–∏ –∏–∑ –º–µ–Ω—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: </b>", parse_mode="html", reply_markup=reply_markups.menu_button)

    else:
        await bot.send_message(message.chat.id, "‚ùóÔ∏è –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É—Ç–µ—Å—å ‚ùóÔ∏è", parse_mode="html", reply_markup=reply_markups.start_button)
        await bot.delete_message(chat_id = message.chat.id, message_id = message.message_id)









#  CALLBACKS

@dp.callback_query_handler(lambda call: True)
async def callback(call: types.CallbackQuery):



#  VIEW PROFILES

    #  NEXT PROFILE
    if call.data == "next_profile":
        await view_profiles.view_profiles_call(call)





#  PROFILE SETTINGS

    #  DISPLAY PROFILE SETTINGS
    elif call.data == "profile_settings":
        await display.profile_settings(call)


    #  EDIT USERNAME
    elif call.data == "edit_username":
        await ProfileStates.username.set()
        await bot.send_message(call.message.chat.id, "üë§  –í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º:", reply_markup = reply_markups.cancel_button)
        await bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)

    #  EDIT  FIRSTNAME
    elif call.data == "edit_firstname":
        await ProfileStates.firstname.set()
        await bot.send_message(call.message.chat.id, "ü™™  –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:", reply_markup = reply_markups.cancel_button)
        await bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)

    #  EDIT AGE
    elif call.data == "edit_age":
        await ProfileStates.age.set()
        await bot.send_message(call.message.chat.id, "üîû  –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup = reply_markups.cancel_button)
        await bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)

    #  EDIT CITY
    elif call.data == "edit_city":
        await ProfileStates.city.set()
        await bot.send_message(call.message.chat.id, "üèôÔ∏è  –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥:", reply_markup = reply_markups.cancel_button)
        await bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)

    #  EDIT GENDER
    elif call.data == "edit_gender":
        await ProfileStates.gender.set()
        await bot.send_message(call.message.chat.id, "üë´  –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª:", reply_markup = reply_markups.edit_gender_reply)
        await bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)

    #  EDIT STATUS
    elif call.data == "edit_status":
        await ProfileStates.status.set()

        main_sql.execute('SELECT gender FROM user_profile WHERE id = ?', (call.message.chat.id,))
        user_gender = main_sql.fetchone()[0]

        if user_gender == "–ü–∞—Ä–µ–Ω—å":
            await bot.send_message(call.message.chat.id, "üë©‚Äç‚ù§Ô∏è‚Äçüë®  –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:", reply_markup = reply_markups.male_edit_status_reply)
            await bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)

        elif user_gender == "–î–µ–≤—É—à–∫–∞":
            await bot.send_message(call.message.chat.id, "üë©‚Äç‚ù§Ô∏è‚Äçüë®  –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:", reply_markup = reply_markups.female_edit_status_reply)
            await bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)

        else:
            await bot.send_message(call.message.chat.id, "üë©‚Äç‚ù§Ô∏è‚Äçüë®  –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:", reply_markup = reply_markups.edit_status_reply)
            await bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)

    #  EDIT BIO
    elif call.data == "edit_bio":
        await ProfileStates.bio.set()
        await bot.send_message(call.message.chat.id, "üí¨  –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:", reply_markup = reply_markups.cancel_button)
        await bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)

    #  EDIT PHOTO
    elif call.data == "edit_photo":
        await ProfileStates.photo.set()
        await bot.send_message(call.message.chat.id, 'üñº  –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:', reply_markup = reply_markups.cancel_button)
        await bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)





#  STATISTICS

    #  DISPLAY STATISTICS
    elif call.data == "statistics":
        await profile_statistics.statistics(call)


    #  MY FOLLOWERS
    elif call.data == "my_followers":
        await profile_statistics.followers_statistics(call)

    #  MY FOLLOWS
    elif call.data == "my_follows":
        await profile_statistics.follows_statistics(call)

    #  MY LIKES
    elif call.data == "my_likes":
        await profile_statistics.likes_statistics(call)

    #  MY DISLIKES
    elif call.data == "my_dislikes":
        await profile_statistics.dislikes_statistics(call)

    #  MY VIEWS
    elif call.data == "my_views":
        await profile_statistics.views_statistics(call)





#  BACK TO PROFILE

    elif call.data == "back_to_profile":
        await display.back_to_profile(call)





#  SETTINGS

    #  DISPLAY GENDERS
    elif call.data == "set_gender":
        await SettingsStates.gender.set()
        await bot.send_message(call.message.chat.id, "üë´  –ö–∞–∫–æ–≥–æ –ø–æ–ª–∞ –≤—ã –∏—â–µ—Ç–µ?", reply_markup = reply_markups.gender_settings_reply)
        await bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)

    #  DISPLAY CITY SETTINGS
    elif call.data == "set_city":
        await SettingsStates.city.set()
        await bot.send_message(call.message.chat.id, "üèôÔ∏è  –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–∞—Ç—å –ª—é–¥–µ–π:", reply_markup=reply_markups.cancel_city_button)
        await bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)

    #  DISPLAY NOTIFICATION SETTINGS
    elif call.data == "set_age":
        await bot.send_message(call.message.chat.id, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ . . .", reply_markup = None)

    #  DISPLAY NOTIFICATION SETTINGS
    elif call.data == "set_notifications":
        await bot.send_message(call.message.chat.id, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ . . .", reply_markup = None)





#  ACTIONS

    #  FOLLOW
    elif call.data.startswith("follow_"):
        user_id = call.data.split("_")[1]
        main_sql.execute('UPDATE user_action SET id_2 = ? WHERE id_1 = ?', (user_id, call.message.chat.id))
        main_db.commit()
        await follow.follow_profile(call)

    #  UNFOLLOW
    elif call.data.startswith("unfollow_"):
        user_id = call.data.split("_")[1]
        main_sql.execute('UPDATE user_action SET id_2 = ? WHERE id_1 = ?', (user_id, call.message.chat.id))
        main_db.commit()
        await unfollow.unfollow_profile(call)

    #  LIKE
    elif call.data.startswith("like_"):
        user_id = call.data.split("_")[1]
        main_sql.execute('UPDATE user_action SET id_2 = ? WHERE id_1 = ?', (user_id, call.message.chat.id))
        main_db.commit()
        await like.like_profile(call)

    #  DISLIKE
    elif call.data.startswith("dislike_"):
        user_id = call.data.split("_")[1]
        main_sql.execute('UPDATE user_action SET id_2 = ? WHERE id_1 = ?', (user_id, call.message.chat.id))
        main_db.commit()
        await dislike.dislike_profile(call)

    #  SEND MESSAGE
    elif call.data.startswith("message_"):
        user_id = call.data.split("_")[1]
        main_sql.execute('UPDATE user_action SET id_2 = ? WHERE id_1 = ?', (user_id, call.message.chat.id))
        main_db.commit()
        await bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=reply_markups.cancel_button)
        await ViewStatusState.message.set()



#  REPLY ACTIONS

    #  ANSWER
    elif call.data.startswith("replymessage_"):
        user_id = call.data.split("_")[1]
        main_sql.execute('UPDATE user_action SET id_2 = ? WHERE id_1 = ?', (user_id, call.message.chat.id))
        main_db.commit()
        await bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup = reply_markups.cancel_button)
        await ReplyState.message.set()

    #  FOLLOW
    elif call.data.startswith("replyfollow_"):
        user_id = call.data.split("_")[1]
        main_sql.execute('UPDATE user_action SET id_2 = ? WHERE id_1 = ?', (user_id, call.message.chat.id))
        main_db.commit()
        await reply_callbacks.follow_profile(call)

    #  UNFOLLOW
    elif call.data.startswith("replyunfollow_"):
        user_id = call.data.split("_")[1]
        main_sql.execute('UPDATE user_action SET id_2 = ? WHERE id_1 = ?', (user_id, call.message.chat.id))
        main_db.commit()
        await reply_callbacks.unfollow_profile(call)

    #  LIKE
    elif call.data.startswith("replylike_"):
        user_id = call.data.split("_")[1]
        main_sql.execute('UPDATE user_action SET id_2 = ? WHERE id_1 = ?', (user_id, call.message.chat.id))
        main_db.commit()
        await reply_callbacks.like_profile(call)

    #  DISLIKE
    elif call.data.startswith("replydislike_"):
        user_id = call.data.split("_")[1]
        main_sql.execute('UPDATE user_action SET id_2 = ? WHERE id_1 = ?', (user_id, call.message.chat.id))
        main_db.commit()
        await reply_callbacks.dislike_profile(call)

    #  PROFILE
    elif call.data.startswith("profile_"):
        user_id = call.data.split("_")[1]
        main_sql.execute('UPDATE user_action SET id_2 = ? WHERE id_1 = ?', (user_id, call.message.chat.id))
        main_db.commit()
        await reply_callbacks.reply_profile(call)











#  CHAT

#  PUBLIC CHAT

    #  JOIN CHAT
    elif call.data == "join_chat":
        await public_chat.join_chat(call)

    #  VIEW CHAT USERS
    elif call.data == "view_chat_users":
        await public_chat.view_chat_users(call)

    #  SEND HELLO
    elif call.data == "send_hello":
        await public_chat.send_hello(call)

    #  SEND GREETING
    elif call.data.startswith("sendgreeting_"):
        user_id = call.data.split("_")[1]
        main_sql.execute('UPDATE user_action SET id_2 = ? WHERE id_1 = ?', (user_id, call.message.chat.id))
        main_db.commit()
        await reply_callbacks.send_greeting(call)

    #  DELETE CHAT MESSAGE
    elif call.data == "delete_chat_message":
        if call.message.chat.id == 284929331:
            await public_chat.delete_chat_message(call)

#  ANONYM CHAT

    #  SEARCH ANONYM USER
    elif call.data == "search_anonym_user":

        user_id = main_sql.execute('SELECT id FROM user_access WHERE id = ?', (call.message.chat.id,)).fetchone()[0]
        id_1 = chat_sql.execute('SELECT id FROM queue').fetchone()[0]

        if id_1 == "-":
            chat_sql.execute('UPDATE queue SET id = ?', (user_id,))
            chat_db.commit()

            await bot.send_message(user_id, "<b> üîç  –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ . . . </b>", parse_mode = "html", reply_markup = reply_markups.cancel_queue_button)
            await bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)

        else:
            chat_sql.execute('UPDATE queue SET id = ?', ("-",))
            chat_sql.execute('INSERT INTO chat (id_1, id_2) VALUES (?, ?)', (id_1, user_id))
            chat_sql.execute('UPDATE user_status SET status = ? WHERE id = ?', ("Yes", user_id))
            chat_sql.execute('UPDATE user_status SET status = ? WHERE id = ?', ("Yes", id_1))
            chat_db.commit()

            await bot.send_message(user_id, '<b> üé≠  –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–∞—Ç—å—Å—è ! </b>', parse_mode = "html", reply_markup = reply_markups.leave_anonym_chat_button)
            await bot.send_message(id_1, '<b> üé≠  –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–∞—Ç—å—Å—è ! </b>', parse_mode = "html", reply_markup = reply_markups.leave_anonym_chat_button)
            try:
                await bot.delete_message(chat_id = user_id, message_id = call.message.message_id)
                await bot.delete_message(chat_id = id_1, message_id = call.message.message_id - 1)
            except:
                pass




#  VERIFICATION

    #  DISPLAY VERIFICATION
    elif call.data == "verification":
        await bot.send_message(
            chat_id = call.message.chat.id,
            text =
            "<b> ‚òëÔ∏è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚òëÔ∏è</b>"
            "\n\n–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –≥–∞–ª–æ—á–∫–∞–º–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ."
            "\n\n<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</b>"
            "\n<b>1.</b> –ó–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø–æ–ª—è –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ."
            "\n<b>2.</b> –í –ø—Ä–æ—Ñ–∏–ª–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–≤–æ—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å –ª–∏—Ü–æ–º."
            "\n<b>3.</b> –ò–º—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞—Å—Ç–æ—è—â–µ–µ."
            "\n\n–ï—Å–ª–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–±–ª—é–¥–∞–µ—Ç –≤—Å–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –≤—ã—à–µ, –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é  üòä",
            parse_mode="html", reply_markup = inline_markups.verification_inline)

    #  SEND VERIFICATION
    elif call.data == "send_verification":
        main_sql.execute('SELECT username FROM user_profile WHERE id = ?', (call.message.chat.id,))
        user_username = main_sql.fetchone()[0]
        await bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)
        await bot.send_message(call.message.chat.id, "‚úÖ  –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º !", parse_mode="html")
        await bot.send_message(284929331, f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  <code>{user_username}</code>", parse_mode="html")





#  HIDE MESSAGE  #

    elif call.data == "hide_message":
        await bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)










#  ADMIN MENU

    #  DISPLAY ALL USERS
    elif call.data == "show_all_users":
        if call.message.chat.id == 284929331:
            await admin.show_all_users(call.message)

    #  DISPLAY VERIFIED USERS
    elif call.data == "show_verified_users":
        if call.message.chat.id == 284929331:
            await admin.show_verified_users(call.message)

    #  DISPLAY USERS WITH PHOTO
    elif call.data == "show_photo_users":
        if call.message.chat.id == 284929331:
            await admin.show_photo_users(call.message)

    #  ADMIN - VIEW PROFILE
    elif call.data.startswith("user_"):
        user_id = call.data.split("_")[1]
        main_sql.execute('UPDATE user_action SET id_2 = ? WHERE id_1 = ?', (user_id, call.message.chat.id))
        main_db.commit()
        await reply_callbacks.reply_profile(call)









#  PROFILE SETTINGS

#  EDIT USERNAME
@dp.message_handler(state = ProfileStates.username)
async def edit_username(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['username'] = message.text
        message.text = str.lower(message.text)

        main_sql.execute('SELECT username FROM user_profile WHERE username = ?', (message.text,))
        found_username = main_sql.fetchone()

        if message.text == '‚ùå  –æ—Ç–º–µ–Ω–∞  ‚ùå':
            await bot.send_message(message.chat.id, '‚ùå  –û—Ç–º–µ–Ω–µ–Ω–æ  ‚ùå', reply_markup = reply_markups.menu_button)
            await state.finish()
            await delete_message(message)
            await asyncio.sleep(1)
            await display.display_profile_settings(message)

        elif found_username:
            await bot.send_message(message.chat.id, "‚ùóÔ∏è –î–∞–Ω–Ω—ã–π <b>–Æ–ó–ï–†–ù–ï–ô–ú</b> —É–∂–µ –∑–∞–Ω—è—Ç.", parse_mode="html")
            await delete_message(message)

        elif any(symbol in message.text for symbol in symbols):
            await bot.send_message(message.chat.id, "‚ùóÔ∏è <b>–Æ–ó–ï–†–ù–ï–ô–ú</b> –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª—ã.", parse_mode="html", reply_markup = reply_markups.cancel_button)
            await delete_message(message)

        elif emoji_list(message.text):
            await bot.send_message(message.chat.id, "‚ùóÔ∏è <b>–Æ–ó–ï–†–ù–ï–ô–ú</b> –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç–º–æ–¥–∑–∏.", parse_mode="html", reply_markup = reply_markups.cancel_button)
            await delete_message(message)

        elif " " in message.text:
            await bot.send_message(message.chat.id, "‚ùóÔ∏è <b>–Æ–ó–ï–†–ù–ï–ô–ú</b> –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç—Å—Ç—É–ø—ã.", parse_mode="html", reply_markup = reply_markups.cancel_button)
            await delete_message(message)

        elif len(message.text) > 15:
            await bot.send_message(message.chat.id, "‚ùóÔ∏è <b>–Æ–ó–ï–†–ù–ï–ô–ú</b> –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ 15 –±—É–∫–≤.", parse_mode="html", reply_markup = reply_markups.cancel_button)
            await delete_message(message)

        elif len(message.text) < 6:
            await bot.send_message(message.chat.id, "‚ùóÔ∏è <b>–Æ–ó–ï–†–ù–ï–ô–ú</b> –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—å—à–µ 6 –±—É–∫–≤.", parse_mode="html", reply_markup = reply_markups.cancel_button)
            await delete_message(message)

        else:
            main_sql.execute('UPDATE user_profile SET username = ? WHERE id = ?', (message.text, message.chat.id))
            main_sql.execute('UPDATE user_chat SET username = ? WHERE id = ?', (message.text, message.chat.id))
            main_sql.execute('UPDATE user_verification SET username = ? WHERE id = ?', (message.text, message.chat.id))
            main_sql.execute('UPDATE user_statistics SET username = ? WHERE id = ?', (message.text, message.chat.id))
            main_sql.execute('UPDATE user_settings SET username = ? WHERE id = ?', (message.text, message.chat.id))
            main_db.commit()

            await bot.send_message(message.chat.id, "‚úÖ  –í–∞—à <b>–Æ–ó–ï–†–ù–ï–ô–ú</b> –æ–±–Ω–æ–≤–ª—ë–Ω  !", parse_mode = "html", reply_markup = reply_markups.menu_button)
            await state.finish()
            await delete_message(message)
            await asyncio.sleep(1)
            await display.display_profile_settings(message)

#  EDIT FIRSTNAME
@dp.message_handler(state = ProfileStates.firstname)
async def edit_firstname(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['firstname'] = message.text

        if message.text == '‚ùå  –û—Ç–º–µ–Ω–∞  ‚ùå':
            await bot.send_message(message.chat.id, '‚ùå  –û—Ç–º–µ–Ω–µ–Ω–æ  ‚ùå', reply_markup = reply_markups.menu_button)
            await state.finish()
            await delete_message(message)
            await asyncio.sleep(1)
            await display.display_profile_settings(message)

        elif any(symbol in message.text for symbol in symbols):
            await bot.send_message(message.chat.id, "‚ùóÔ∏è <b>–ò–ú–Ø</b> –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª—ã.", parse_mode = "html", reply_markup = reply_markups.cancel_button)
            await delete_message(message)

        elif emoji_list(message.text):
            await bot.send_message(message.chat.id, "‚ùóÔ∏è <b>–ò–ú–Ø</b> –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç–º–æ–¥–∑–∏.", parse_mode = "html", reply_markup = reply_markups.cancel_button)
            await delete_message(message)

        elif re.findall(r"\d+", message.text):
            await bot.send_message(message.chat.id, "‚ùóÔ∏è <b>–ò–ú–Ø</b> –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á–∏—Å–ª–∞.", parse_mode = "html", reply_markup = reply_markups.cancel_button)
            await delete_message(message)

        elif " " in message.text:
            await bot.send_message(message.chat.id, "‚ùóÔ∏è <b>–ò–ú–Ø</b> –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç—Å—Ç—É–ø—ã.", parse_mode = "html", reply_markup = reply_markups.cancel_button)
            await delete_message(message)

        elif len(message.text) > 15:
            await bot.send_message(message.chat.id, "‚ùóÔ∏è <b>–ò–ú–Ø</b> –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ 15 –±—É–∫–≤.", parse_mode = "html", reply_markup = reply_markups.cancel_button)
            await delete_message(message)

        else:
            message.text = str.title(message.text)
            main_sql.execute('UPDATE user_profile SET firstname = ? WHERE id = ?', (message.text, message.chat.id))
            main_db.commit()
            await bot.send_message(message.chat.id, "‚úÖ  –í–∞—à–µ <b>–ò–ú–Ø</b> –æ–±–Ω–æ–≤–ª–µ–Ω–æ !", parse_mode = "html", reply_markup = reply_markups.menu_button)
            await state.finish()
            await delete_message(message)
            await asyncio.sleep(1)
            await display.display_profile_settings(message)

#  EDIT AGE
@dp.message_handler(state = ProfileStates.age)
async def edit_age(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['age'] = message.text

        if message.text == '‚ùå  –û—Ç–º–µ–Ω–∞  ‚ùå':
            await bot.send_message(message.chat.id, '‚ùå  –û—Ç–º–µ–Ω–µ–Ω–æ  ‚ùå', reply_markup = reply_markups.menu_button)
            await state.finish()
            await delete_message(message)
            await asyncio.sleep(1)
            await display.display_profile_settings(message)

        elif any(symbol in message.text for symbol in symbols):
            await bot.send_message(message.chat.id, "‚ùóÔ∏è <b>–í–û–ó–†–ê–°–¢</b> –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª—ã.", parse_mode = "html", reply_markup = reply_markups.cancel_button)
            await delete_message(message)

        elif emoji_list(message.text):
            await bot.send_message(message.chat.id, "‚ùóÔ∏è <b>–í–û–ó–†–ê–°–¢</b> –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç–º–æ–¥–∑–∏.", parse_mode = "html", reply_markup = reply_markups.cancel_button)
            await delete_message(message)

        elif any(char.isalpha() for char in message.text):
            await bot.send_message(message.chat.id, "‚ùóÔ∏è <b>–í–û–ó–†–ê–°–¢</b> –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã.", parse_mode = "html", reply_markup = reply_markups.cancel_button)
            await delete_message(message)

        elif " " in message.text:
            await bot.send_message(message.chat.id, "‚ùóÔ∏è <b>–í–û–ó–†–ê–°–¢</b> –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç—Å—Ç—É–ø—ã.", parse_mode = "html", reply_markup = reply_markups.cancel_button)
            await delete_message(message)

        elif len(message.text) > 2:
            await bot.send_message(message.chat.id, "‚ùóÔ∏è <b>–í–û–ó–†–ê–°–¢</b> –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ 2 —á–∏—Å–µ–ª.", parse_mode = "html", reply_markup = reply_markups.cancel_button)
            await delete_message(message)

        else:
            main_sql.execute('UPDATE user_profile SET age = ? WHERE id = ?', (message.text, message.chat.id))
            main_db.commit()
            await bot.send_message(message.chat.id, "‚úÖ  –í–∞—à <b>–í–û–ó–†–ê–°–¢</b> –æ–±–Ω–æ–≤–ª—ë–Ω  !", parse_mode = "html", reply_markup = reply_markups.menu_button)
            await state.finish()
            await delete_message(message)
            await asyncio.sleep(1)
            await display.display_profile_settings(message)

#  EDIT CITY
@dp.message_handler(state = ProfileStates.city)
async def edit_city(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['city'] = message.text

        if message.text == '‚ùå  –û—Ç–º–µ–Ω–∞  ‚ùå':
            await bot.send_message(message.chat.id, '‚ùå  –û—Ç–º–µ–Ω–µ–Ω–æ  ‚ùå', reply_markup = reply_markups.menu_button)
            await state.finish()
            await delete_message(message)
            await asyncio.sleep(1)
            await display.display_profile_settings(message)

        elif any(symbol in message.text for symbol in symbols):
            await bot.send_message(message.chat.id, "‚ùóÔ∏è <b>–ì–û–†–û–î</b> –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª—ã.", parse_mode = "html", reply_markup = reply_markups.cancel_button)
            await delete_message(message)

        elif emoji_list(message.text):
            await bot.send_message(message.chat.id, "‚ùóÔ∏è <b>–ì–û–†–û–î</b> –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç–º–æ–¥–∑–∏.", parse_mode = "html", reply_markup = reply_markups.cancel_button)
            await delete_message(message)

        elif re.findall(r"\d+", message.text):
            await bot.send_message(message.chat.id, "‚ùóÔ∏è <b>–ì–û–†–û–î</b> –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á–∏—Å–ª–∞.", parse_mode = "html", reply_markup = reply_markups.cancel_button)
            await delete_message(message)

        elif len(message.text) > 20:
            await bot.send_message(message.chat.id, "‚ùóÔ∏è <b>–ì–û–†–û–î</b> –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ 20 –±—É–∫–≤.", parse_mode = "html", reply_markup = reply_markups.cancel_button)
            await delete_message(message)

        else:
            message.text = str.title(message.text)
            main_sql.execute('UPDATE user_profile SET city = ? WHERE id = ?', (message.text, message.chat.id))
            main_db.commit()
            await bot.send_message(message.chat.id, "‚úÖ  –í–∞—à <b>–ì–û–†–û–î</b> –æ–±–Ω–æ–≤–ª–µ–Ω  !", parse_mode="html", reply_markup = reply_markups.menu_button)
            await state.finish()
            await delete_message(message)
            await asyncio.sleep(1)
            await display.display_profile_settings(message)

#  EDIT GENDER
@dp.message_handler(state = ProfileStates.gender)
async def edit_gender(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['gender'] = message.text

        if message.text == '‚ùå  –û—Ç–º–µ–Ω–∞  ‚ùå':
            await bot.send_message(message.chat.id, '‚ùå  –û—Ç–º–µ–Ω–µ–Ω–æ  ‚ùå', reply_markup = reply_markups.menu_button)
            await state.finish()
            await delete_message(message)
            await asyncio.sleep(1)
            await display.display_profile_settings(message)

        elif message.text == 'üôã‚Äç‚ôÇÔ∏è  –ü–∞—Ä–µ–Ω—å':
            main_sql.execute('UPDATE user_profile SET gender = ? WHERE id = ?', ("–ü–∞—Ä–µ–Ω—å", message.chat.id))
            main_db.commit()
            await bot.send_message(message.chat.id, "‚úÖ  –í–∞—à <b>–ü–û–õ</b> –æ–±–Ω–æ–≤–ª—ë–Ω  !", parse_mode = "html", reply_markup = reply_markups.menu_button)
            await state.finish()
            await delete_message(message)
            await asyncio.sleep(1)
            await display.display_profile_settings(message)

        elif message.text == 'üôã‚Äç‚ôÄÔ∏è  –î–µ–≤—É—à–∫–∞':
            main_sql.execute('UPDATE user_profile SET gender = ? WHERE id = ?', ("–î–µ–≤—É—à–∫–∞", message.chat.id))
            main_db.commit()
            await bot.send_message(message.chat.id, "‚úÖ  –í–∞—à <b>–ü–û–õ</b> –æ–±–Ω–æ–≤–ª—ë–Ω  !", parse_mode = "html", reply_markup = reply_markups.menu_button)
            await state.finish()
            await delete_message(message)
            await asyncio.sleep(1)
            await display.display_profile_settings(message)

        elif message.text == 'üëª  –î—Ä—É–≥–æ–µ':
            main_sql.execute('UPDATE user_profile SET gender = ? WHERE id = ?', ("–î—Ä—É–≥–æ–µ", message.chat.id))
            main_db.commit()
            await bot.send_message(message.chat.id, "‚úÖ  –í–∞—à <b>–ü–û–õ</b> –æ–±–Ω–æ–≤–ª—ë–Ω  !", parse_mode = "html", reply_markup = reply_markups.menu_button)
            await state.finish()
            await delete_message(message)
            await asyncio.sleep(1)
            await display.display_profile_settings(message)

        else:
            await bot.send_message(message.chat.id, "üë´  –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª:", reply_markup = reply_markups.edit_gender_reply)
            await delete_message(message)

#  STATUS
@dp.message_handler(state = ProfileStates.status)
async def edit_status(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['status'] = message.text

        main_sql.execute('SELECT gender FROM user_profile WHERE id = ?', (message.chat.id,))
        user_gender = main_sql.fetchone()[0]

        if message.text == '‚ùå  –û—Ç–º–µ–Ω–∞  ‚ùå':
            await bot.send_message(message.chat.id, '‚ùå  –û—Ç–º–µ–Ω–µ–Ω–æ  ‚ùå', reply_markup = reply_markups.menu_button)
            await state.finish()
            await delete_message(message)
            await asyncio.sleep(1)
            await display.display_profile_settings(message)

        elif message.text == '–í –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö':
            main_sql.execute('UPDATE user_profile SET status = ? WHERE id = ?', ("–í –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö", message.chat.id))
            main_db.commit()
            await bot.send_message(message.chat.id, "‚úÖ  –í–∞—à <b>–°–¢–ê–¢–£–°</b> –æ–±–Ω–æ–≤–ª—ë–Ω  !", parse_mode = "html", reply_markup = reply_markups.menu_button)
            await state.finish()
            await delete_message(message)
            await asyncio.sleep(1)
            await display.display_profile_settings(message)

        elif message.text == '–í —Ä–∞–∑–≤–æ–¥–µ':
            main_sql.execute('UPDATE user_profile SET status = ? WHERE id = ?', ("–í —Ä–∞–∑–≤–æ–¥–µ", message.chat.id))
            main_db.commit()
            await bot.send_message(message.chat.id, "‚úÖ  –í–∞—à <b>–°–¢–ê–¢–£–°</b> –æ–±–Ω–æ–≤–ª—ë–Ω  !", parse_mode = "html", reply_markup = reply_markups.menu_button)
            await state.finish()
            await delete_message(message)
            await asyncio.sleep(1)
            await display.display_profile_settings(message)

        elif message.text == '–í –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ':
            main_sql.execute('UPDATE user_profile SET status = ? WHERE id = ?', ("–í –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ", message.chat.id))
            main_db.commit()
            await bot.send_message(message.chat.id, "‚úÖ  –í–∞—à <b>–°–¢–ê–¢–£–°</b> –æ–±–Ω–æ–≤–ª—ë–Ω  !", parse_mode = "html", reply_markup = reply_markups.menu_button)
            await state.finish()
            await delete_message(message)
            await asyncio.sleep(1)
            await display.display_profile_settings(message)

        else:

            #  MALE
            if user_gender == "–ü–∞—Ä–µ–Ω—å":
                if message.text == '–°–≤–æ–±–æ–¥–µ–Ω':
                    main_sql.execute('UPDATE user_profile SET status = ? WHERE id = ?', ("–°–≤–æ–±–æ–¥–µ–Ω", message.chat.id))
                    main_db.commit()
                    await bot.send_message(message.chat.id, "‚úÖ  –í–∞—à <b>–°–¢–ê–¢–£–°</b> –æ–±–Ω–æ–≤–ª—ë–Ω  !", parse_mode = "html", reply_markup = reply_markups.menu_button)
                    await state.finish()
                    await delete_message(message)
                    await asyncio.sleep(1)
                    await display.display_profile_settings(message)

                elif message.text == '–í –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö':
                    main_sql.execute('UPDATE user_profile SET status = ? WHERE id = ?', ("–í –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö", message.chat.id))
                    main_db.commit()
                    await bot.send_message(message.chat.id, "‚úÖ  –í–∞—à <b>–°–¢–ê–¢–£–°</b> –æ–±–Ω–æ–≤–ª—ë–Ω  !", parse_mode = "html", reply_markup = reply_markups.menu_button)
                    await state.finish()
                    await delete_message(message)
                    await asyncio.sleep(1)
                    await display.display_profile_settings(message)

                elif message.text == '–ñ–µ–Ω–∞—Ç':
                    main_sql.execute('UPDATE user_profile SET status = ? WHERE id = ?', ("–ñ–µ–Ω–∞—Ç", message.chat.id))
                    main_db.commit()
                    await bot.send_message(message.chat.id, "‚úÖ  –í–∞—à <b>–°–¢–ê–¢–£–°</b> –æ–±–Ω–æ–≤–ª—ë–Ω  !", parse_mode = "html", reply_markup = reply_markups.menu_button)
                    await state.finish()
                    await delete_message(message)
                    await asyncio.sleep(1)
                    await display.display_profile_settings(message)

                else:
                    await bot.send_message(message.chat.id, "üë©‚Äç‚ù§Ô∏è‚Äçüë®  –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:", reply_markup = reply_markups.cancel_button)
                    await delete_message(message)

            #  FEMALE
            elif user_gender == "–î–µ–≤—É—à–∫–∞":

                if message.text == '–°–≤–æ–±–æ–¥–Ω–∞':
                    main_sql.execute('UPDATE user_profile SET status = ? WHERE id = ?', ("–°–≤–æ–±–æ–¥–Ω–∞", message.chat.id))
                    main_db.commit()
                    await bot.send_message(message.chat.id, "‚úÖ  –í–∞—à <b>–°–¢–ê–¢–£–°</b> –æ–±–Ω–æ–≤–ª—ë–Ω  !", parse_mode = "html", reply_markup = reply_markups.menu_button)
                    await state.finish()
                    await delete_message(message)
                    await asyncio.sleep(1)
                    await display.display_profile_settings(message)

                elif message.text == '–ó–∞–º—É–∂–µ–º':
                    main_sql.execute('UPDATE user_profile SET status = ? WHERE id = ?', ("–ó–∞–º—É–∂–µ–º", message.chat.id))
                    main_db.commit()
                    await bot.send_message(message.chat.id, "‚úÖ  –í–∞—à <b>–°–¢–ê–¢–£–°</b> –æ–±–Ω–æ–≤–ª—ë–Ω  !", parse_mode = "html", reply_markup = reply_markups.menu_button)
                    await state.finish()
                    await delete_message(message)
                    await asyncio.sleep(1)
                    await display.display_profile_settings(message)

                else:
                    await bot.send_message(message.chat.id, "üë©‚Äç‚ù§Ô∏è‚Äçüë®  –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:", reply_markup = reply_markups.cancel_button)
                    await delete_message(message)

            #  UNKNOWN
            else:

                if message.text == '–°–≤–æ–±–æ–¥–µ–Ω(–Ω–∞)':
                    main_sql.execute('UPDATE user_profile SET status = ? WHERE id = ?', ("–°–≤–æ–±–æ–¥–µ–Ω(–Ω–∞)", message.chat.id))
                    main_db.commit()
                    await bot.send_message(message.chat.id, "‚úÖ  –í–∞—à <b>–°–¢–ê–¢–£–°</b> –æ–±–Ω–æ–≤–ª—ë–Ω  !", parse_mode = "html", reply_markup = reply_markups.menu_button)
                    await state.finish()
                    await delete_message(message)
                    await asyncio.sleep(1)
                    await display.display_profile_settings(message)

                elif message.text == '–ñ–µ–Ω–∞—Ç / –ó–∞–º—É–∂–µ–º':
                    main_sql.execute('UPDATE user_profile SET status = ? WHERE id = ?', ("–ñ–µ–Ω–∞—Ç / –ó–∞–º—É–∂–µ–º", message.chat.id))
                    main_db.commit()
                    await bot.send_message(message.chat.id, "‚úÖ  –í–∞—à <b>–°–¢–ê–¢–£–°</b> –æ–±–Ω–æ–≤–ª—ë–Ω  !", parse_mode = "html", reply_markup = reply_markups.menu_button)
                    await state.finish()
                    await delete_message(message)
                    await asyncio.sleep(1)
                    await display.display_profile_settings(message)

                else:
                    await bot.send_message(message.chat.id, "üë©‚Äç‚ù§Ô∏è‚Äçüë®  –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:", reply_markup = reply_markups.cancel_button)
                    await delete_message(message)

#  EDIT BIO
@dp.message_handler(state = ProfileStates.bio)
async def edit_bio(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['bio'] = message.text

        if message.text == '‚ùå  –û—Ç–º–µ–Ω–∞  ‚ùå':
            await bot.send_message(message.chat.id, '‚ùå  –û—Ç–º–µ–Ω–µ–Ω–æ  ‚ùå', reply_markup = reply_markups.menu_button)
            await state.finish()
            await delete_message(message)
            await asyncio.sleep(1)
            await display.display_profile_settings(message)

        elif len(message.text) > 300:
            await bot.send_message(message.chat.id, "‚ùóÔ∏è <b>–û –°–ï–ë–ï</b> –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ 300 –±—É–∫–≤.", parse_mode="html", reply_markup = reply_markups.cancel_button)
            await delete_message(message)

        else:
            main_sql.execute('UPDATE user_profile SET bio = ? WHERE id = ?', (message.text, message.chat.id))
            main_db.commit()
            await bot.send_message(message.chat.id, "‚úÖ  –í–∞—à–µ <b>–û –°–ï–ë–ï</b> –æ–±–Ω–æ–≤–ª–µ–Ω–æ  !", parse_mode="html", reply_markup=reply_markups.menu_button)
            await state.finish()
            await delete_message(message)
            await asyncio.sleep(1)
            await display.display_profile_settings(message)

#  EDIT PHOTO
@dp.message_handler(content_types = types.ContentTypes.ANY, state = ProfileStates.photo)
async def edit_photo(message: types.Message, state: FSMContext):

    if message.text == '‚ùå  –û—Ç–º–µ–Ω–∞  ‚ùå':
        await bot.send_message(message.chat.id, '‚ùå  –û—Ç–º–µ–Ω–µ–Ω–æ  ‚ùå', reply_markup = reply_markups.menu_button)
        await state.finish()
        await delete_message(message)
        await asyncio.sleep(1)
        await display.display_profile_settings(message)

    elif message.photo:

        main_sql.execute('SELECT count FROM user_photo WHERE id = ?', (message.chat.id,))
        user_photo_count = main_sql.fetchone()[0]

        #  CLONING PHOTO
        original_photo_path = f"photo/{message.chat.id}.jpg"
        new_photo_path = f"photo/backup/{message.chat.id} ({user_photo_count + 1}).jpg"
        shutil.copy2(original_photo_path, new_photo_path)

        await message.photo[-1].download(destination_file = f"photo/{message.chat.id}.jpg")

        main_sql.execute('UPDATE user_profile SET photo = ? WHERE id = ?', ("Yes", message.chat.id))
        main_sql.execute('UPDATE user_photo SET count = count + 1 WHERE id = ?', (message.chat.id,))
        main_db.commit()

        await bot.send_message(message.chat.id, "‚úÖ  –í–∞—à–∞ <b>–§–û–¢–û–ì–†–ê–§–ò–Ø</b> –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞  !", parse_mode="html", reply_markup=reply_markups.menu_button)
        await state.finish()
        await delete_message(message)
        await asyncio.sleep(1)
        await display.display_profile_settings(message)

    else:
        await bot.send_message(message.chat.id, 'üñº  –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:', reply_markup = reply_markups.cancel_button)




#  SEND MESSAGE
@dp.message_handler(state = MessageState.username)
async def check_message_user(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['username'] = message.text

        main_sql.execute('SELECT username FROM user_profile WHERE id = ?', (message.chat.id,))
        user_username = main_sql.fetchone()[0]

        if message.text == "‚ùå  –û—Ç–º–µ–Ω–∞  ‚ùå":
            await bot.send_message(message.chat.id, '‚ùå  –û—Ç–º–µ–Ω–µ–Ω–æ  ‚ùå', parse_mode="html", reply_markup=reply_markups.menu_button)
            await state.finish()
            await delete_message(message)

        elif message.text == user_username:
            await bot.send_message(message.chat.id, '‚ùóÔ∏è –ù–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ.', parse_mode="html", reply_markup = reply_markups.cancel_button)
            await delete_message(message)

        else:
            main_sql.execute('SELECT username FROM user_profile WHERE username = ?', (message.text,))
            success_username = main_sql.fetchone()

            if success_username:
                main_sql.execute('SELECT id FROM user_profile WHERE username = ?', (message.text,))
                id_2 = main_sql.fetchone()[0]
                main_sql.execute('UPDATE user_action SET id_2 = ? WHERE id_1 = ?', (id_2, message.chat.id))
                main_db.commit()
                await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup = reply_markups.cancel_button)
                await state.finish()
                await MessageState.message.set()

            else:
                await bot.send_message(message.chat.id, '‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>–Æ–ó–ï–†–ù–ï–ô–ú</b> –Ω–µ –Ω–∞–π–¥–µ–Ω.', parse_mode="html", reply_markup = reply_markups.cancel_button)
                await delete_message(message)

@dp.message_handler(state = MessageState.message)
async def send_message_user(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['message'] = message.text

        if message.text == "‚ùå  –û—Ç–º–µ–Ω–∞  ‚ùå":
            await bot.send_message(message.chat.id, '‚ùå  –û—Ç–º–µ–Ω–µ–Ω–æ  ‚ùå', parse_mode="html", reply_markup=reply_markups.menu_button)
            await state.finish()
            await delete_message(message)

        else:
            await state.finish()
            await send_message.send_message(message)


#  REPLY MESSAGE
@dp.message_handler(state = ReplyState.message)
async def reply_message_user(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['message'] = message.text

        if message.text == "‚ùå  –û—Ç–º–µ–Ω–∞  ‚ùå":
            main_sql.execute('SELECT status FROM user_chat WHERE id = ?', (message.chat.id,))
            user_chat_status = main_sql.fetchone()[0]

            if user_chat_status == "Yes":
                await bot.send_message(message.chat.id, '‚ùå  –û—Ç–º–µ–Ω–µ–Ω–æ', parse_mode = "html", reply_markup = reply_markups.leave_chat_button)
                await state.finish()
                await delete_message(message)

            else:
                await bot.send_message(message.chat.id, '‚ùå  –û—Ç–º–µ–Ω–µ–Ω–æ', parse_mode = "html", reply_markup = reply_markups.menu_button)
                await state.finish()
                await delete_message(message)

        else:
            await state.finish()
            await reply_callbacks.reply_message(message)


#  VIEW STATUS SEND MESSAGE
@dp.message_handler(state = ViewStatusState.message)
async def reply_message_user(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['message'] = message.text

        if message.text == "‚ùå  –û—Ç–º–µ–Ω–∞  ‚ùå":
            await bot.send_message(message.chat.id, '‚ùå  –û—Ç–º–µ–Ω–µ–Ω–æ', parse_mode = "html", reply_markup = reply_markups.view_profiles_button)
            await state.finish()
            await delete_message(message)

        else:
            await state.finish()
            await send_message.view_status_send_message(message)






#  SEARCH
@dp.message_handler(state = SearchState.username)
async def check_message_user(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['username'] = message.text

        main_sql.execute('SELECT username FROM user_profile WHERE id = ?', (message.chat.id,))
        user_username = main_sql.fetchone()[0]

        if message.text == "‚ùå  –û—Ç–º–µ–Ω–∞  ‚ùå":
            await bot.send_message(message.chat.id, '‚ùå  –û—Ç–º–µ–Ω–µ–Ω–æ  ‚ùå', parse_mode="html", reply_markup=reply_markups.menu_button)
            await state.finish()
            await delete_message(message)

        elif message.text == user_username:
            await state.finish()
            await delete_message(message)
            await display.display_own_profile(message)

        else:
            main_sql.execute('SELECT username FROM user_profile WHERE username = ?', (message.text,))
            found_username = main_sql.fetchone()

            if found_username:
                await state.finish()
                await search_user.search(message)

            else:
                await bot.send_message(message.chat.id, '‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>–Æ–ó–ï–†–ù–ï–ô–ú</b> –Ω–µ –Ω–∞–π–¥–µ–Ω.', parse_mode="html", reply_markup = reply_markups.cancel_button)
                await delete_message(message)






#  SETTINGS

#  GENDER
@dp.message_handler(state = SettingsStates.gender)
async def gender_settings(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['gender'] = message.text

        if message.text == '‚ùå  –û—Ç–º–µ–Ω–∞  ‚ùå':
            await bot.send_message(message.chat.id, '‚ùå  –û—Ç–º–µ–Ω–µ–Ω–æ  ‚ùå', reply_markup = reply_markups.menu_button)
            await state.finish()
            await delete_message(message)
            await asyncio.sleep(1)
            await settings.settings(message)

        elif message.text == 'üôã‚Äç‚ôÇÔ∏è  –ü–∞—Ä–Ω–µ–π':
            main_sql.execute('UPDATE user_settings SET gender = ? WHERE id = ?', ("–ü–∞—Ä–µ–Ω—å", message.chat.id))
            main_db.commit()
            await bot.send_message(message.chat.id, "‚úÖ  –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ <b>–ü–û–õ–ê</b> –æ–±–Ω–æ–≤–ª–µ–Ω—ã  !", parse_mode = "html", reply_markup = reply_markups.menu_button)
            await state.finish()
            await delete_message(message)
            await asyncio.sleep(1)
            await settings.settings(message)

        elif message.text == 'üôã‚Äç‚ôÄÔ∏è  –î–µ–≤—É—à–µ–∫':
            main_sql.execute('UPDATE user_settings SET gender = ? WHERE id = ?', ("–î–µ–≤—É—à–∫–∞", message.chat.id))
            main_db.commit()
            await bot.send_message(message.chat.id, "‚úÖ  –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ <b>–ü–û–õ–ê</b> –æ–±–Ω–æ–≤–ª–µ–Ω—ã  !", parse_mode = "html", reply_markup = reply_markups.menu_button)
            await state.finish()
            await delete_message(message)
            await asyncio.sleep(1)
            await settings.settings(message)

        elif message.text == 'üëª  –ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã':
            main_sql.execute('UPDATE user_settings SET gender = ? WHERE id = ?', ("–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã", message.chat.id))
            main_db.commit()
            await bot.send_message(message.chat.id, "‚úÖ  –í–∞—à–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ <b>–ü–û–õ–ê</b> –æ–±–Ω–æ–≤–ª–µ–Ω—ã  !", parse_mode = "html", reply_markup = reply_markups.menu_button)
            await state.finish()
            await delete_message(message)
            await asyncio.sleep(1)
            await settings.settings(message)

        else:
            await bot.send_message(message.chat.id, "üë´  –ö–∞–∫–æ–≥–æ –ø–æ–ª–∞ –≤—ã –∏—â–µ—Ç–µ?", reply_markup = reply_markups.gender_settings_reply)

#  CITY
@dp.message_handler(state = SettingsStates.city)
async def city_settings(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['city'] = message.text

        if message.text == '‚ùå  –û—Ç–º–µ–Ω–∞  ‚ùå':
            await bot.send_message(message.chat.id, '‚ùå  –û—Ç–º–µ–Ω–µ–Ω–æ  ‚ùå', reply_markup = reply_markups.menu_button)
            await state.finish()
            await delete_message(message)
            await asyncio.sleep(1)
            await settings.settings(message)

        elif message.text == "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã":
            main_sql.execute('UPDATE user_settings SET city = ? WHERE id = ?', ("–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã", message.chat.id))
            main_db.commit()
            await bot.send_message(message.chat.id, "‚úÖ  –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ <b>–ì–û–†–û–î–ê</b> –æ–±–Ω–æ–≤–ª–µ–Ω—ã  !", parse_mode = "html", reply_markup = reply_markups.menu_button)
            await state.finish()
            await delete_message(message)
            await asyncio.sleep(1)
            await settings.settings(message)

        elif any(symbol in message.text for symbol in symbols):
            await bot.send_message(message.chat.id, "‚ùóÔ∏è <b>–ì–æ—Ä–æ–¥</b> –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª—ã.", parse_mode = "html", reply_markup = reply_markups.cancel_city_button)
            await delete_message(message)

        elif emoji_list(message.text):
            await bot.send_message(message.chat.id, "‚ùóÔ∏è <b>–ì–û–†–û–î</b> –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç–º–æ–¥–∑–∏.", parse_mode = "html", reply_markup = reply_markups.cancel_city_button)
            await delete_message(message)

        elif re.findall(r"\d+", message.text):
            await bot.send_message(message.chat.id, "‚ùóÔ∏è <b>–ì–û–†–û–î</b> –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á–∏—Å–ª–∞.", parse_mode = "html", reply_markup = reply_markups.cancel_city_button)
            await delete_message(message)

        elif len(message.text) > 20:
            await bot.send_message(message.chat.id, "‚ùóÔ∏è <b>–ì–û–†–û–î</b> –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ 20 –±—É–∫–≤.", parse_mode = "html", reply_markup = reply_markups.cancel_city_button)
            await delete_message(message)

        else:
            message.text = str.title(message.text)
            main_sql.execute('UPDATE user_settings SET city = ? WHERE id = ?', (message.text, message.chat.id))
            main_db.commit()
            await bot.send_message(message.chat.id, "‚úÖ  –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ <b>–ì–û–†–û–î–ê</b> –æ–±–Ω–æ–≤–ª–µ–Ω—ã  !", parse_mode = "html", reply_markup = reply_markups.menu_button)
            await state.finish()
            await delete_message(message)
            await asyncio.sleep(1)
            await settings.settings(message)



#  DELETE MESSAGES
async def delete_message(message):
    try:
        await bot.delete_message(chat_id = message.chat.id, message_id = message.message_id)
        await bot.delete_message(chat_id = message.chat.id, message_id = message.message_id - 1)
    except:
        pass



#  ON START UP
async def start_bot(_):
    await bot.send_message(284929331, '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á—ë–Ω !')




#  LAUNCH
if __name__ == '__main__':
    try:
        executor.start_polling(dp, skip_updates = True, on_startup = start_bot)
    except Exception as e:
        print(e)